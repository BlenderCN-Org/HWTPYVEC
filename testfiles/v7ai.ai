%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(TM) 7.0%%AI8_CreatorVersion: 8.0.1%%For: (MD MD) (MD)%%Title: (Untitled art 5)%%CreationDate: (1/13/01) (12:57 PM)%%BoundingBox: 7 94 601 775%%HiResBoundingBox: 7.9995 94.9688 600.0537 775%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentFonts: Helvetica%%DocumentNeededFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 9 45 601 783%AI3_DocumentPreview: None%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI5_OpenToView: -421 955 1 1265 976 18 0 1 7 40 0 0%AI5_OpenViewLayers: 77%%PageOrigin:9 45%%AI3_PaperRect:-9 783 603 -9%%AI3_Margin:9 -40 -9 9%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 112 128 8%%BeginData: 13890 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD57FFCAFD04FFC3BCC3C3B593FD5CFFCAFFFFFFCABC93C39A8C8C%C39AFD078CA1FD52FFCAFFFFFFCABC93C393FCB5B593FC8CFC8CFC8CFC8C%FC8CFC8CFC8CFC8CB5C3FD44FFCACAA8C39AFFA1CA9A938CB58C8C93FD08%8CFCFD0B8C933536355A36FD048CCAFD31FFCACA9AFFFFCACACABCBC9AB5%93CA93BC93FC8CFC8CFC93FC8CFC8CFC8CFC8CB58CFC8CFC8CFC8CFC8CFC%8CFC6F7D6F9B8CFC8C9A363C363C363C539B8CFCCAFD18FFA1CAC3C39AC3%9AC39AC3C3C393B593938CFC8CBC93FCFD078CB5FD268C533C36364C8C6F%36363C5AAF5A3C363636938C93A8FD0EFF8CFC8CFC8CFC8CFC8CFC8CFC8C%FC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8C%FC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC6F5A367E8C%FC8C76363C366753FC8C3C363C84FD04FF8B363C53FC8CCAFD0EFFFD3B8C%68776F6F8C8C8C8D4C3636364C8C8C52363660FFFFBC8C8C2E3636FF7D52%7DFFA836363668B5FD0FFF8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8C%FC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8C%FC8CB58CFC8CFC8CFC6F60363C4CFC8CB5363C60FFFFBC8CFC6F3C36FF7D%7D93FC8C7D36A9A8F8F8F87DFF363C53FC8CC3FD0EFFFD318C6859363C6F%8C8C8C2F365AFFA8938C8C683636FF7D7D938C8C6F36A97DF8F86F8C8C35%3C7E7DF8F8F852FF3C365A8C8C9AFD0EFF8CFC8CFC8CFC8CFC8CFC8CFC8C%FC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8C7D36%5A68FC8CFC6F3C84FF60598CFC8C5936FF7DA8CAFC8CFC36857DF8F87D8C%FC533C847DF8F8F8B58C5A368BA820F827A8FF363C36B08CC3FD0EFFFD1F%8C68533570FD048C683684FF5A368C8C8C7036A852FF368C8C8C2F8527F8%F8FF8C8C69365952F8F852BC8C703660A827277D9A8C683636FFFFA8FFFF%3636366F8C8CA8FD0EFF8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC%8CFC8CA953B58CFC8CFC8C7EA8FF36B58CFC8CB55A7D27FF36B58CFC5267%27F852AF6FFC8C605A52F827FF768CB53567A87D7DFF70FC8C7D36AFFFFF%AF848CFC533C36675A67363C365A8CFC8CFD0FFFFD0D8C688568FD068CA2%52AF69FD058C5927523C6F8C8C8C686027F8A8368C8C8C6F36A827A83676%8C8C6F3CA8A8A8604C8C8C6F366084AF36538C8C6859363C36362F8C8C8C%4B3C3636363C365A688C8CC3FD0FFF8CFC8CFC8CFC8CFC8CFC8CFC8CB552%B58CFC8CFC8CFC6F5936B08CFC8CFC8C9A596735FC8CFC8CFC538B603C53%FC8CFC8C593667363C68FC8CFC4C3C363C36778CFC8C93363C363C2FFC8C%FC8C76526036608CFC8CFC6993525A599B8CB5CAFD11FFFD218C69FD078C%69764BFD068C6F4B7768FD068C6F526FFD068C686F69FD148CB5CAFD12FF%8CFC8CFCC3B58CFC8CFC8CFC8CB593FC8CFC8CFC8CFC8CB58CFC8CFC8CFC%8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC8CFC%8CFC8CFC8CFC8CFC8CFC8CFC8CB593FC8CB58CFC93FC8CFFC3C3CAC38CB5%93FCCAFD13FF8C8C8C9AFFCAFD068CFCCAFF93FD068C93CAC38C8C44FD04%8CBCCA93FD078CC393FD088CC38CB5FD068C9ABC93C3938C8CBC8CBCA8B5%CAFFA8FFFFCA93FFC3C3FD05FFCACAFFA1FD14FF8CFC9AFFFFFFC3FC8CFC%8CB5CAFFFFFF93FC8CFC8CC3FFFFFFCA6F4D45FC93C3FFFFFFCA8CFC8CB5%9ACAFFFFFFCA8CFC8CCACAFD05FF9ABCCAFFCAFD33FF8C8CFD05FF938C8C%8CA8FD05FF8C8C8CC3FD05FF7E222322FD06FFCA8C8CCAFD07FFA1C3FD3F%FF8CFD07FF8CFCC3FD07FF93B5FD06FF534D224D4DFD07FFC3FFFFFFA8FD%45FFCAFD07FFCA8CCAFD07FFCA93FD06FF532223224D22A9FD08FF4C4D4D%A8FD4CFFC3C3FD0FFF774D234D224D29CBFD07FF77224D234D7EFD17FF7E%78FD42FFA8004D2223224D22A2FD06FF0023224D222322A2A8FD11FFA87E%2923227DFD42FF4D234D224D234D22A9FD05FF4D224D234D224D234D78FD%0EFFCB774D234D224D4DFD42FF534D2223224D2223227EFD04FF2223224D%2223224D22232278A8FD09FF7E532223224D22232252FD43FF224D234D22%4D234D2278FFFFFF77234D224D234D224D234D224D77A9FD04FFCBA24D4D%224D234D224D234D22FD43FFA8004D2223224D22232277A8FF774D222322%4D2223224D2223224D217EFFA95323224D2223224D2223224D2228FD45FF%4C4D224D234D224D2353FFFF284D224D234D224D234D224D234D7E78234D%224D234D224D234D224D234D4CFD45FFAF0023224D2223F84D224CFFFF21%23224D2223224D2223224D2223224D2223224D2223224D2223224D2277FD%45FF2F3C352F014D222801597EFFFFCB294D224D234D224D234D004D234D%224D234D224D234D224D234D224DFD45FF59FD06362F36363659FD04FF22%23224D2223224D28A8004D2223224D2223224D2223224D22234CFD45FF59%363C363C363C353C363C36A8FFFFFFA87D7D287728777DFFFF7D234D224D%234D224D234D224D234D28FD46FF0D36363C36360D3C3636363C59FFFFA8%FFA8A8FFA8A8FFA8FFFFFF532223224D2223224D2223224D00FD47FF3536%3C363C2F3C363C363C3684FFA8FFFFA8FFFFFFA8FFFFA8FFFFFFA8284D22%4D234D224D234D005252FD46FF0DFD04362FFD063659A8FFA8A8FD05FFA8%FFA8A8FD04FF4C28004D2223004C005227277DFD45FF7E363C363C363C36%3C363C2FA9FFFFA8FD07FFA8FFFFFD04A87DA8FF537D4C7DFD04522752FD%45FF7D3C36360D3C3636363C3659FFFFA8FD07FF7DA87DA87DA8FFFD05A8%FD047D52522727F8FD08FFA87DFFFD06A8FD35FF593C052E363C363C3659%FFFFA8FFA8A87DFD04A8FD05FFA8A8FFA87D7DA8A87D7D27522752F8277D%A87DA8A8A87DFF7DA87DA87D7D52A8FD37FF5927FD04360D2F7DA87DA87D%FD05FF7DA852A8FFFF7DFFA8A8F827F87D52527D7D52522727F8FD47FFA8%FF7D2E7D59A8FD05FFFD06A8FFA8FFFFA8A8FFA8FFA8FFA8FFA8A87D7D52%7D52522727FD47FFA8FFFFA87DA87DA8A8FFFFFFA8A87DA87D7DA8FFA8A8%A8FFFFFF7DFFFD04A87DA87D7D5252272727FD46FFA8FD04FFA8FFFFA8FF%7DA8A8A87DFFFFA8A8A87DA87DA8FD04FFA8FF7DFFA8A87D7D5252275227%FD46FFA8A8FD04FFA8FFA8A8FD06FF52A87D7D52FD04FFA87DA87D7DA8A8%7DA87D7D527D5252F8A8FD46FFA8FD06FFA8FFFFA8FD04FFA8FFFFA8A8FF%FD06A8FD04FFA8A87D7D527D277D52FD47FFA8A8FD07FFA8FFFD05A8FFA8%A8FFFF7DA87DA87DA87DA8FD07FFA8525252FD48FFA8FD09FFA8FFA8A8FF%FF7DA87DA8A8FD06FFA8A8A82727F8F8F82752FD4AFFA8FD0AFFA87DFD05%FFA8A87DA87DA87DA87D7DA8A8F8F8040B040C0500F87DFD48FFA8FD08FF%7D52277D7DFD05A8FD08FFA8FFF850805D1112131A0D28F87DFD46FFA8A8%FD05FFA852F82E0C2F062700A8FFA8FD08FFA8FFF84AFEA456110C13130E%0701F8A8FD45FFA8FD05FFA827063C363C363C3635F87DFFA8FD06FFA8FF%52209EFEA45D0B1213140D2F0121F8FD44FFA8FD06FF2706FD083635F87D%FFA8FD04FFA8FFA820F826A4AA56110B13130D072300F8A8FD43FFA8FD05%FF7D053C363C363C363C363C363505FFFFA8FFFFA8FFA8FFF89874FE7A5D%111213140D2F0147F87DFD42FFA8FD06FFF805063C3636363C3636363C36%277DFFFFA87DFFA8FF7DF8B4C0FEAB560B0413140E0723222152FD42FFA8%FD05FFA82728350D3C363C363C363C363C0C7DA8FFFFFFA8FFFFFFF8BAC0%FE805D11120C130D290147207DFD41FF7DFD06FFA8F83636360D2F0DFD06%362F52FFA8A852FD04A8F84474FEA432110B13130E0100F8F87DFD30FFA8%A87DA8A8FFA8A8A8FD0FFFA828363C363C363C2F352E352F352859A8FF52%A8FFA87D7DF84A98FE805D1112131A0D2F0021F8FD08FFA87DFFA8FFA8FF%A8A8FD20FFA87DA87DA8527D27FFA8A87DA87DA87D7DFD08FFF83C363636%3C3636363C0D2FF82E59FD08FFA8F898FEA456110C13130E0702F8527DA8%7DA87DA87DFF52A8FFA8FD047DA8FD39FF2E0D3C363C363C363C363C3635%F8FD0AFF52F8A4A45D0B1213140D2FF827A8FD4AFF7D05FD0A36062EFD0B%FF51F8562C110B131306F800A8FD4CFF282E363C363C363C363C2E27FD04%FF4DFD08FF7DF8F8040B0505F852FD4FFF27050D36363C36360527A8FFFF%FF4D23FD0AFF7D7D527D7DA8FD51FF7D2EF8270528F87DFD04FF4D4D23A9%FFFFFFA253FD5EFF7DA8A8FD05FF4D23224DA2FFA25322A9FD65FF534D22%4D23784D4D23A2FD0DFFCBFD56FF7E224D2223224D2223224DFD0DFF4C28%FD30FF7EA2FD22FF7E4D234D224D234D224D234DA8FD0CFF772377FD04FF%7DA8FD29FF7E2377FFFFFFA8A9FD1BFFA94D23224D2223224D694C224D70%FD0CFF4C224D01FFFFFF4C287DFD28FFA24D2278FFFF7E4DA8FD19FFA8FF%7EA2787E4D7723716993467169A2FD0BFF77224D234DFF7D4C4D53FD28FF%7E4D22234DA94D2377FD0BFF4DFD0DFF7E53FD07FF70FD046968702278FD%08FF77522223224D004C224D22FD28FF4D4D224D234D224D4DFD0BFF534D%A8FD0BFF7E4D29FD05FF9BB5696F69936993224D234DCBFD05FF284D224D%234D224D234D21FD26FFA877224D2223014D222322A9FD0AFF4D2200A2FF%FF7D4CA8FD05FF7E23214DFFFFFFA229A16970696968936923224D224DA8%FF7D4D004D2223224D2223224D2253FD25FF7E4D224D234D474D234D2278%FD0AFF534CF82177FF4D4D22FD05FFA24D22A04DA9A89B2378FF78239469%B58CFC8CC47EA24D4D534C214D224D224D234D224D234CFD27FFA8A8A27E%284D224D222323FD09FF4C22F8F8F829222122A8FD04FF534D22A075774D%764B4DA9FF22538C8C9AC39AB58CC3FD08FF7D52004D2122004C22537DFD%29FF4D234D224D234D22CBFD05FF7E2228FD04F800F8004DFFFFCBA2294D%22A09FA075A0A04DA2FFA9A9C3BCFD10FF534D214D214D214D234D7DFD27%FFA9224D224D224D224D22A2FFFF774D00FD08F82253FF7E4D224D769F75%A0759F75774DFD15FF7D282123224D0023224D224D77FD26FF7E4D2377A8%FFA8A277784D784D4D22282127FD05F82122FF4D4D227776A09FA09FA09F%A123FD17FF214C224D2752537D284D214D53FD25FF534DA9FD0AFFA2A9A8%4D2221FD05F84D7DFFFFFFA8A9A82375A07B9F75764DFD15FF534DF828F8%4C00527DFFFFFF777D7DFD24FFA2FD0FFFA84DFD07F84D77FD04FFA923A0%7BA0A0A07BA04DCBFD13FF774D5353FFFFFF7DFD3CFF22F8F8F800220021%F8224CFFFFFF53777576214D2229217722A2FD55FFA228004D28A2A8A977%5A224D4DCBFF77234D227EA2A27778234D227EFD4EFFA8FD05FF77225353%FD04FFAF5AFFFFFFA8FF224D53CBFD06FFA9A87ECBFD4CFFCBFFA9FD04FF%77FD06FFA93061FD04FF7E77A8FD4AFF4D77537E4D7E537E777E537E4D4D%2353234D4C53224D4C534D4D4C5A2F362F534D5335364D4D4C534D4D4C53%4D4D4C534D4D4C53224C214C224C21534D7E537E537E537E537E537E537E%537E777E4C7E537E777E537E5378537E4D534D4D28534D4D28534D4D4C53%4D4D22FD05FFA2FD0BFFCBFFFFFFA9A9CBFFA9FD05FFAF304D225A616184%61FD11FF9C469A9EC299774CFD05FF7DA27EFD23FFA8FFA8A2FD05FF53FF%A8FFA8FD05FFA8A9A8FFA2FF7ECBFFA9FD04FF845A294D22232985AF8584%FD12FFCB2271464D22FD05FF466F929446FD20FFA87DFFA8FF53FD05FFA2%A8A8A8FD05FFA8CBFFFFA8A9FFFFA8FFA8FFFFFF363C294D224D23365AFF%60FD0AFFCB787E78A277774C774C769FA04CFD05FF53769976469CFD20FF%A8FFA8A8FF78FD05FF53FFFFA8A8FFFFA9A2FFFFFF7EFFA2A87EFFA2FFA8%8536A92F4D2223224D22300DFFFF7E4C7E717E7DFF4C4C4B756F4C759F9E%C6C6FEC6C69E4D224C22714C4C229C7EFD21FFA8A8A8FFA8FF53FD05FFA2%7DFFA8FFFFCBA2CBA2A97DFD05FFA8FFFFFF85858485363C2254234D225A%84716FC299A0994D4C714C774C769FCCFD07FECCFECCC6CC9F777EFD27FF%A8FFA8A2FD05FF53A8A8A8FD05FFA8A2A27DFFFFA8A8FFA8A9FD06FF3636%2F5A2F3629362F706F764C4C28FD05FFA84CC6FD07FEC6FEA44C28A1A9FF%FFFFA8FD21FFFD05A8FF53FD05FF7EA8FFA8FD07FFA8A9FFFFFFCBA8FFFF%A9FD04FF8585FFFFA9AFAFFF858560A37DFD08FFA94CA59EA6A5A5A4A74D%7D74CC754DA2FD05FF295377FD1FFFA8FFA8FFFFA2FD05FF77A8FFA8FD07%FFA3A8A87DA3777E22A9A8A8A8FFFF8584FF608484855A84366036AFFD04%FF7D774C4C454C2152289A28762171224D4D534C4C214D4C764B70235329%4D53CBFD1AFFA8FFFD04A853FD05FFA2A8FFA8FD07FFA8CBA8FD07FFA8A9%FFFF60855ACBFD06FFAFAF84FFFF4D4C7799C1C0C74C7722774CA3A8A8A9%A24D78FFCB78784D724C9A99A04D857E7E294E53CBFD19FFA8FFA8FF7EFD%05FF53A8A8FFA8FD05FFA8A8A9FFA8FFA9FD08FF6028A27753287877CBFD%06FF53A074764C4C6F764C4D4B75757829774DA8534D7EAFA8AF7778294D%227022845A5A294D294D22A2A9FD14FFA87DFFFFA877FD05FF784D774DA2%7E7E77A253774D787E4D4D784D78297E53784DA24D78A1CFC9774C775353%4CA253784D7E4CC79EC7754C46784D4D4BA6FF784D785353294E54AFA853%297859A3534D22855A5A224D2953294D29774D78537E78A27E7E78A27E7E%53A87E7E787E7E7E53784D77FD13FF4DFFFFA953774D532878A8FF777DA7%CF4CA9284D4C764B774C777D7174C1744C4B754A764C2351FFA84D4D774D%774D4D4DA95978284D224D29532F5A5A5422A8294D2229222929547DFD27%FF77FFFFA8784D787EA27E784D7777CFC9A278CBFFFF53774CA17BA04C76%9EC74CA24D4D4C7574A7FFFFA278A8A94D4D4DA2A8AFA8A34DA97E78234D%4D5A5A544DA24D7E4D4D224D2930295453A9FD23FF4DFFFFA94D78224D22%A2A1A9A1A8A7CF774D224D2223224D22234BA074C19EC12223224D224C4C%7EA8FF7E4D2223224D4D7E59A384844D4D224D294D294D294D2229224D22%29224D292F2953294DFD22FFA27E7E78A27E7E78A27E7E787E537777A27D%FFCBA9A8A9A8A9A8A9A8A977774B77FD06FFA8A24D7E77A2FFFFA8A9A8A9%7E784D7E54547EFD45FFA853A9FD0DFFA94CA9FD08FFA27722A9FD08FF7E%78294D77FD62FFA9FD0BFFA9CBFDFCFFFDFCFFFDFCFFFDFCFFFD97FF7DA9%7DA87DA9A2A87DA97DA87DA97DA87DA97DA87DA97DA87DA97DA87DA97DA8%7DA9A2A87DA97DA87DA9A2A8A2A97DA87DA9A2A87DA97DA8A2A9A2A87DA9%7DA8A2A97DA87DA97DA87DA9A2A87DA97DA87DA97DA87DA97DA87DA97DA8%7DA97DA8A2A9A2A87DA97DA8A2A9A2A87DA9A2CBCBA8A9A8CBA8A9A8CBA8%A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8A953774D%A278A37DCBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8%A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8CBA8A9A8%CBA8A9A8CBA8A9A8CBA8A9A9FD20FFA8A24D7777A8A8FF7DA97D77537E4D%5353534D7E53A2A8A8A8FD54FFCBA84D7877A8FFFFA8FFA8FFA8FFFFFD04%A8FFA8FFFFA27DA87E7E53787E784DA27EA2A8A9A9FD46FFA8A24D4D77A8%FD04FFA8A87DFF7DA852FFA8FD04FFA8A8A8FFFF7DFF7DFFA8FD04FFA97D%7E77774D4D4D784D7E77A2A2A8A8FD39FFA8537E7EFFA8FFA8FFA8FFFFFF%A8FFFFA8A8FFFFA8FFFFA8FFA8FFFFA8FFFFA8A8FFFFFFA8A8FFA8A8FFFF%A8FFA8FFA8FFA8FFA8A977A25377537E4D7E78A2A8A9A8FD2AFFA87E4D78%A2FFA8A8FFA8FFA8A8FFA8FF7DFFFFFFA8FFA8FF7DFFA8FFA8A8FFFFFFA8%A8FFA8FF7DFFFD04A8FFFFA8A8FFA8FFA8A8FFA8FF7DFFFFFFA8A8FFA8FF%A87DA9777E4C534D784D78537E77A9A8FD0BFFA27E7E53A27E7E78A27E7E%78A27E7E53A27E7E4D4D7DFD06A8FFA8FFA8FFA8FFFD04A87DA8FFA8FFA8%FD04FFA8A8A8CB7DA8FFA8FFA8A8FFFFFFFD05A8FFA8FFA8FFA8FFFD04A8%A2A8A8FF7DFFA8FFA8FFFD04A87DA8FFA8A8A277A24D4D2253537E53A27E%7EA8FD14FF775352A8A8FFA8FD07FFA8A87DFFA8A8FFFFA8FFA8FFA8FFFD%04A8FFA8FFFFA8FFA8FFA8FFA8A8A8FFA8FD07FFA8A87DFFA8FFA8FFFFA8%FD04FFA8A87DA8A8A8A2A253774D4D4D7EA2A8FD1EFFA84DA2A8FFA8FFFD%04A8FFFFA8FF7DFFFFA8FFFD04A8FFFFA8FFA8FFA8FFA8FFFFA8A8A8FFFF%A8FFA8FFFFA8FFFD04A8FFFFA8FF7DFF7DFFA8FFA8FFA8A8A8A277785378%78A2A8FD28FF7D7853A8A8FFA8FF7DFFA8A8A8FF7DFD05A8FFA8FFA87DFF%FFA8FFFD05A8FFA8FFFF7DFFFFFD04A8FFA8FF7DFFA8A8A8FF7DA97D7E53%534D53537EA2FD31FFA94D777EFFA8FFA8FD05FFA8FFA8FD05FFA8FFA8FF%FFA8A8FFA8FD05FFA8FFA8FFFFA8FFA8A8FFA8CB7DA2787753787EA2A8FD%3AFFA8774DA2A8A8A8FF7DFD09A87DFFFFA8A8FFFD07A8FF7DFFFFA8A87E%527E4D774D7853A8A2FD44FF5377A8FFA8FFA8FFA8FFFFFFA8A8A8FD07FF%A8FFFFFFA8A87DA2777E537878A9A8FD4CFFA97E4D7E7DFFA8FFA8A8FFA8%FFA8A8FFA8A8A8A277774D784D7877A9A8FD56FF53537DFFA8FFA8FF7EA9%7E7E4D774D7E7EA9A9FD5EFFA8A24D784C7E4D7E53A9A8FD40FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helveticauserdict /_useSmoothShade true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR4.85 3.617 m4.85 75.617 L76.85 75.617 L76.85 3.617 L4.85 3.617 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Brick)(Brick) 0 0 72 72 [%AI3_Tile(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR0 0 m0 72 L72 72 L72 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR0 68.4097 m72 68.4097 lS0 61.209 m72 61.209 LS0 54.0088 m72 54.0088 LS0 46.8076 m72 46.8076 LS0 39.6084 m72 39.6084 LS0 32.4072 m72 32.4072 LS0 25.207 m72 25.207 LS0 18.0059 m72 18.0059 LS0 10.8057 m72 10.8057 LS0 3.6064 m72 3.6064 LS68.4102 68.4097 m68.4102 61.2217 lS54.0098 68.4097 m54.0098 61.2217 LS39.6094 68.4097 m39.6094 61.2217 LS25.21 68.4097 m25.21 61.2217 LS10.8105 68.4097 m10.8105 61.2217 LS68.4102 53.9717 m68.4102 46.7842 lS54.0098 53.9717 m54.0098 46.7842 LS39.6094 53.9717 m39.6094 46.7842 LS25.21 53.9717 m25.21 46.7842 LS10.8105 53.9717 m10.8105 46.7842 LS68.4102 39.5967 m68.4102 32.4092 lS54.0098 39.5967 m54.0098 32.4092 LS39.6094 39.5967 m39.6094 32.4092 LS25.21 39.5967 m25.21 32.4092 LS10.8105 39.5967 m10.8105 32.4092 LS68.4102 25.2217 m68.4102 18.0342 lS54.0098 25.2217 m54.0098 18.0342 LS39.6094 25.2217 m39.6094 18.0342 LS25.21 25.2217 m25.21 18.0342 LS10.8105 25.2217 m10.8105 18.0342 LS68.4102 10.7842 m68.4102 3.5967 lS54.0098 10.7842 m54.0098 3.5967 LS39.6094 10.7842 m39.6094 3.5967 LS25.21 10.7842 m25.21 3.5967 LS10.8105 10.7842 m10.8105 3.5967 LS61.1973 3.5967 m61.1973 0 LS46.7969 3.5967 m46.7969 0 LS32.3965 3.5967 m32.3965 0 LS17.9971 3.5967 m17.9971 0 LS3.5967 3.5967 m3.5967 0 lS61.1973 18.0342 m61.1973 10.8467 LS46.7969 18.0342 m46.7969 10.8467 LS32.3965 18.0342 m32.3965 10.8467 LS17.9971 18.0342 m17.9971 10.8467 LS3.5967 18.0342 m3.5967 10.8467 lS61.1973 32.4092 m61.1973 25.2217 LS46.7969 32.4092 m46.7969 25.2217 LS17.9971 32.4092 m17.9971 25.2217 LS3.5967 32.4092 m3.5967 25.2217 lS61.1973 46.7842 m61.1973 39.5967 LS46.7969 46.7842 m46.7969 39.5967 LS32.3965 46.7842 m32.3965 39.5967 LS17.9971 46.7842 m17.9971 39.5967 LS3.5967 46.7842 m3.5967 39.5967 lS61.1973 61.2217 m61.1973 54.0347 LS46.7969 61.2217 m46.7969 54.0347 LS32.3965 61.2217 m32.3965 54.0347 LS17.9971 61.2217 m17.9971 54.0347 LS3.5967 61.2217 m3.5967 54.0347 lS61.1973 71.959 m61.1973 68.4717 LS46.7969 71.959 m46.7969 68.4717 LS32.3965 71.959 m32.3965 68.4717 LS17.9971 71.959 m17.9971 68.4717 LS3.5967 71.959 m3.5967 68.4717 lS32.3965 32.4092 m32.3965 25.2217 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Leaves - Fall )(Leaves - Fall ) 0 0 64.0781 78.9336 [%AI3_Tile(0 O 0 R 0.05 0.2 1 0 k 0.05 0.2 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR64.0781 78.9336 m64.0781 0 L0 0 L0 78.9336 L64.0781 78.9336 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.83 0 1 0 k 0.83 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:1 D0 XR29.7578 0.9902 m30.4346 1.1914 30.7246 1.3428 V29.2559 4.0547 33.707 8.3359 34.627 9.0762 C35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 Cf13.8525 29.9844 m13.3281 29.5127 13.1309 29.25 V15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C7.2256 14.5 9.2598 15.6133 10.166 15.5645 C10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C8.1875 11.041 9.207 9.5107 10.166 7.0947 C10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C15.373 24.3779 15.373 27.2959 13.8525 29.9844 Cf41.2324 26.0742 m41.5518 26.7021 41.7549 26.959 V44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C46.3408 31.123 45.4395 33.084 44.2402 34.126 C45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C49.749 24.9766 50.584 26.9941 50.25 28.4609 C45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 Cf27.7578 38.7324 m28.4346 38.9316 28.7246 39.084 V27.2559 41.7969 31.707 46.0776 32.627 46.8169 C33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C38.002 44.582 37.3359 46.0547 36.5742 47.5039 C37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C30.7373 55.5146 30.166 54.314 29.2969 53.0366 C30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C30.9775 50.46 29.2852 51.2036 28.793 52.1958 C28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 Cf13.5195 70.3916 m12.9941 69.9209 12.7988 69.6587 V15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C7.8545 51.4497 8.873 49.9189 9.832 47.5039 C10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C15.041 64.7856 15.041 67.7046 13.5195 70.3916 Cf41.2324 64.4824 m41.5518 65.1113 41.7549 65.3682 V44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C51.2881 60.583 50.4268 61.8882 48.5645 62.333 C49.749 63.3862 50.584 65.4033 50.25 66.8691 C45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 Cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Stripes)(Stripes) 8.45 4.6001 80.45 76.6001 [%AI3_Tile(0 O 0 R 1 0.07 1 0 k 1 0.07 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.2 8.2 m80.7 8.2 LS8.2 22.6001 m80.7 22.6001 LS8.2 37.0002 m80.7 37.0002 LS8.2 51.4 m80.7 51.4 LS8.2 65.8001 m80.7 65.8001 LS8.2 15.4 m80.7 15.4 LS8.2 29.8001 m80.7 29.8001 LS8.2 44.2 m80.7 44.2 LS8.2 58.6001 m80.7 58.6001 LS8.2 73.0002 m80.7 73.0002 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--4 Bn%AI5_BeginGradient: (Black, White)(Black, White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Chrome)(Chrome) 0 6 Bd[0<464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3B3A3A3A393939393838383837373736363636353535353434343333333332323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A2929292828282827272726262626252525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A0909090908080807070707060606050505050404040403030302020202010101010000><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515151515151514141414141414141313131313131313121212121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909090808080808080808070707070707070706060606060606060605050505050505050404040404040404030303030303030303020202020202020201010101010101010000000000>1 %_Br00.2751<6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F>1 %_Br0<00000101010102020202030303040404040505050506060607070707080808090909090A0A0A0A0B0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101011111112121212131313141414141515151516161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021212122222222232323232424242525252526262626272727282828282929292A2A2A2A2B2B2B2B2C2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313132323233333333343434353535353636363637373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F40404040414141414242424343434344444444454545464646><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F1010101111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F30303131323232333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243434444444545464647474748484949494A4A4B4B4C4C4C4D4D4E4E4F4F4F5050515151525253535454545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F6060616161626263636464646565666666676768686969696A6A6B6B>1 %_Br10 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A3939393838383837373736363635353535343434333333323232323131313030302F2F2F2E2E2E2E2D2D2D2C2C2C2B2B2B2B2A2A2A292929282828282727272626262525252524242423232322222222212121202020201F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1A1A1A1A1919191818181717171616161615151514141413131313121212111111101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A0909090808080707070706060605050504040404030303020202010101010000>001 %_Br[1 0 50 92 %_Bs0 0.275 1 0.12 1 50 59 %_Bs0 0.275 1 0.42 1 50 50 %_Bs1 0 50 49 %_Bs1 0 50 41 %_Bs1 0.3 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registration]) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0 0 1 k(C=0 M=0 Y=0 K=100) Pc0 0.1 1 0 k(C=0 M=10 Y=100 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc1 0.55 1 0 k(C=100 M=55 Y=100 K=0) Pc1 0.9 0.1 0 k(C=100 M=90 Y=10 K=0) Pc0.15 1 1 0 k(C=15 M=100 Y=100 K=0) Pc0.45 0.9 0 0 k(C=45 M=90 Y=0 K=0) Pc0.5 0.4 0.3 0 k(C=50 M=40 Y=30 K=0) Pc0.5 0.85 1 0 k(C=50 M=85 Y=100 K=0) Pc0.75 0.05 1 0 k(C=75 M=5 Y=100 K=0) Pc0.75 0.9 0 0 k(C=75 M=90 Y=0 K=0) Pc0.8 0.05 0 0 k(C=80 M=5 Y=0 K=0) PcBb2 (Black, White) -7885 8587 0 0 1 0 0 1 0 0 Bg0 BB(Black, White) PcBb2 (Chrome) -7885 8587 0 0 1 0 0 1 0 0 Bg0 BB(Chrome) PcBb2 (Rainbow) -7885 8587 0 0 1 0 0 1 0 0 Bg0 BB(Rainbow) PcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -7885 8587 0 0 1 0 0 1 0 0 Bg0 BB(Yellow & Orange Radial) Pc(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Brick) Pc(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Confetti) Pc(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Leaves - Fall ) Pc(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Stripes) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au0 O0.15 1 1 0 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR35 743.082 m35 662.082 L60 691.082 L88 653.082 L88 743.082 L35 743.082 Lf/ShapeBlendPathID (B) XT/ShapeBlendPathType (K) XTu*u0.15 1 1 0 k1 D138.7842 657.4453 m139.1646 661.0273 L139.3931 665.2568 L139.5977 670.3057 L139.5708 675.9443 L139.0254 685.4131 L139.5283 702.3135 L138.7173 722.4199 L138.8008 743.583 L136.7646 743.8076 L135.2676 744.1797 L133.0757 745.2422 L130.8833 745.5479 L126.728 744.8711 L124.1377 745.2627 L120.9971 745.1855 L117.1558 744.8564 L112.6797 744.5713 L103.9038 744.6104 L92.8184 743.7285 L83.4702 743.2656 L83.4961 739.7119 L82.7695 735.7959 L82.584 731.6836 L82.3037 726.6475 L82.7622 718.9355 L83.1294 710.7246 L83.2759 700.082 L83.3818 682.2344 L83.7417 664.6904 L86.5928 666.7246 L89.4087 668.7725 L94.23 673.6016 L97.689 676.5732 L103.4771 681.8818 L110.3267 689.7109 L110.3809 689.7744 L115.0781 684.0791 L120.4023 678.4629 L124.1919 674.5195 L129.1167 668.998 L138.7842 657.4453 Lf0 D115.5464 699.5664 m114.9946 698.9258 L114.7295 698.1934 L114.1304 697.6563 L113.4824 697.168 L112.7119 696.9648 L111.937 696.9961 L111.2612 697.2783 L110.4858 697.2617 L109.9282 697.7646 L109.2588 698.1826 L109.0386 698.9531 L108.4673 699.5654 L108.8198 700.3574 L108.7588 701.0557 L108.5083 701.9648 L109.2236 702.4609 L109.9746 702.7744 L110.5693 703.1816 L111.1792 703.6748 L111.9365 703.7979 L112.6348 703.5381 L113.5322 703.7617 L113.8726 702.8555 L114.8564 702.7295 L115.0552 701.8691 L115.626 701.2002 L115.084 700.3574 L115.5464 699.5664 Lf*U*u0.8 0.05 0 0 k1 D115.0552 701.8691 m114.8564 702.7295 L113.8726 702.8555 L113.5322 703.7617 L112.6348 703.5381 L111.9365 703.7979 L111.1792 703.6748 L110.5693 703.1816 L109.9746 702.7744 L109.2236 702.4609 L108.5083 701.9648 L108.7588 701.0557 L108.8198 700.3574 L108.4673 699.5654 L109.0386 698.9531 L109.2588 698.1826 L109.9282 697.7646 L110.4858 697.2617 L111.2612 697.2783 L111.937 696.9961 L112.7119 696.9648 L113.4824 697.168 L114.1304 697.6563 L114.7295 698.1934 L114.9946 698.9258 L115.5464 699.5664 L115.084 700.3574 L115.626 701.2002 L115.0552 701.8691 Lf0 D111.9482 699.0215 m111.3975 698.5205 L110.6577 698.4238 L109.9063 698.415 L109.1221 698.7285 L108.8828 699.5488 L108.79 700.29 L108.9629 700.9697 L109.2637 701.6611 L109.8774 702.1572 L110.6577 702.3877 L111.3359 701.9834 L112.1333 701.792 L112.4761 701.0498 L112.4878 700.29 L112.5342 699.5381 L111.9482 699.0215 Lf*U*u1 g1 D112.4761 701.0498 m112.1333 701.792 L111.3359 701.9834 L110.6577 702.3877 L109.8774 702.1572 L109.2637 701.6611 L108.9629 700.9697 L108.79 700.29 L108.8828 699.5488 L109.1221 698.7285 L109.9063 698.415 L110.6577 698.4238 L111.3975 698.5205 L111.9482 699.0215 L112.5342 699.5381 L112.4878 700.29 L112.4761 701.0498 Lf0 D111.0308 697.6807 m110.2412 697.3818 L109.3955 697.5762 L109.1392 698.4473 L109.4927 699.1748 L110.2417 699.5322 L110.9902 699.2188 L111.417 698.4473 L111.0308 697.6807 Lf*U0 g110.2417 699.5322 m109.4927 699.1748 L109.1392 698.4473 L109.3955 697.5762 L110.2412 697.3818 L111.0308 697.6807 L111.417 698.4473 L110.9902 699.2188 L110.2417 699.5322 LfUu*u0.15 1 1 0 k1 D189.5688 661.8086 m190.3296 665.7393 L190.7861 670.3018 L191.1953 675.5879 L191.1426 681.3711 L190.0513 690.4629 L191.0571 706.2998 L189.4346 724.4697 L189.6021 744.084 L186.7715 744.5332 L184.7144 745.2773 L182.502 747.4043 L179.7095 748.0127 L175.0073 746.6592 L171.9956 747.4434 L168.3916 747.2891 L164.2397 746.6299 L159.5576 746.0615 L150.8276 746.1396 L140.8452 744.375 L131.9409 743.4492 L131.9922 739.377 L130.5386 735.4004 L130.1689 730.9619 L129.6079 725.7354 L130.5254 718.1416 L131.2588 710.1914 L131.5522 700.0547 L131.7651 683.498 L132.4844 667.2979 L135.8364 668.6436 L139.0234 669.9014 L144.3052 674.5029 L148.0864 676.8047 L153.9175 680.7588 L160.7144 688.4111 L160.7627 688.4668 L165.9697 682.7598 L171.0864 679.0342 L175.0288 676.083 L179.9004 671.7949 L189.5688 661.8086 Lf0 D168.5391 701.0244 m167.4355 699.7412 L166.9048 698.2793 L165.7075 697.2061 L164.4111 696.2266 L162.8706 695.8213 L161.3198 695.8828 L159.9688 696.4482 L158.4185 696.416 L157.3022 697.4229 L155.9644 698.2568 L155.5239 699.7998 L154.3804 701.0225 L155.0869 702.6074 L154.9639 704.002 L154.4629 705.8213 L155.8936 706.8125 L157.3955 707.4395 L158.585 708.2549 L159.8052 709.2412 L161.3198 709.4873 L162.7158 708.9688 L164.5117 709.415 L165.1914 707.6025 L167.1602 707.3516 L167.5571 705.6289 L168.6978 704.291 L167.6147 702.6074 L168.5391 701.0244 Lf*U*u0.8 0.05 0 0 k1 D167.5571 705.6289 m167.1602 707.3516 L165.1914 707.6025 L164.5117 709.415 L162.7158 708.9688 L161.3198 709.4873 L159.8052 709.2412 L158.585 708.2549 L157.3955 707.4395 L155.8936 706.8125 L154.4629 705.8213 L154.9639 704.002 L155.0869 702.6074 L154.3804 701.0225 L155.5239 699.7998 L155.9644 698.2568 L157.3022 697.4229 L158.4185 696.416 L159.9688 696.4482 L161.3198 695.8828 L162.8706 695.8213 L164.4111 696.2266 L165.7075 697.2061 L166.9048 698.2793 L167.4355 699.7412 L168.5391 701.0244 L167.6147 702.6074 L168.6978 704.291 L167.5571 705.6289 Lf0 D162.6563 699.8857 m161.5552 698.8838 L160.0757 698.6904 L158.5728 698.6729 L157.0044 699.2998 L156.5259 700.9404 L156.3403 702.4238 L156.6855 703.7822 L157.2866 705.166 L158.5146 706.1592 L160.0757 706.6191 L161.4321 705.8086 L163.0278 705.4258 L163.7114 703.9434 L163.7358 702.4238 L163.8286 700.9199 L162.6563 699.8857 Lf*U*u1 g1 D163.7114 703.9434 m163.0278 705.4258 L161.4321 705.8086 L160.0757 706.6191 L158.5146 706.1592 L157.2866 705.166 L156.6855 703.7822 L156.3403 702.4238 L156.5259 700.9404 L157.0044 699.2998 L158.5728 698.6729 L160.0757 698.6904 L161.5552 698.8838 L162.6563 699.8857 L163.8286 700.9199 L163.7358 702.4238 L163.7114 703.9434 Lf0 D161.1641 699.1533 m159.5864 698.5547 L157.894 698.9434 L157.3809 700.6855 L158.0879 702.1416 L159.5864 702.8555 L161.0835 702.2275 L161.9375 700.6865 L161.1641 699.1533 Lf*U0 g159.5864 702.8555 m158.0879 702.1416 L157.3809 700.6855 L157.894 698.9434 L159.5864 698.5547 L161.1641 699.1533 L161.9375 700.6865 L161.0835 702.2275 L159.5864 702.8555 LfUu*u0.15 1 1 0 k1 D240.3525 666.1709 m241.4932 670.4502 L242.1782 675.3467 L242.7925 680.8701 L242.7129 686.7969 L241.0767 695.5137 L242.5859 710.2871 L240.1509 726.5186 L240.4028 744.585 L236.7783 745.2568 L234.1597 746.374 L231.9263 749.5654 L228.5347 750.4795 L223.2871 748.4482 L219.853 749.624 L215.7856 749.3926 L211.3232 748.4033 L206.436 747.5518 L197.7515 747.6689 L188.8711 745.0205 L180.4106 743.6318 L180.4883 739.04 L178.3066 735.0049 L177.7524 730.2383 L176.9121 724.8232 L178.2876 717.3496 L179.3882 709.6592 L179.8281 700.0273 L180.1475 684.7607 L181.2251 669.9053 L185.0806 670.5605 L188.6377 671.0293 L194.3804 675.4023 L198.4839 677.0371 L204.3574 679.6338 L211.1016 687.1113 L211.1436 687.1582 L216.8608 681.4404 L221.77 679.6055 L225.8647 677.6455 L230.6831 674.5928 L240.3525 666.1709 Lf0 D221.5308 702.4824 m219.876 700.5586 L219.0786 698.3652 L217.2842 696.7559 L215.3384 695.2871 L213.0273 694.6777 L210.7026 694.7705 L208.6748 695.6201 L206.3501 695.5703 L204.6758 697.0801 L202.6685 698.3311 L202.0078 700.6455 L200.2925 702.4805 L201.3521 704.8564 L201.1685 706.9502 L200.417 709.6787 L202.562 711.166 L204.8154 712.1055 L206.5996 713.3281 L208.4297 714.8076 L210.7026 715.1777 L212.7964 714.3984 L215.4893 715.0693 L216.5093 712.3506 L219.4619 711.9736 L220.0576 709.3896 L221.7686 707.3838 L220.144 704.8574 L221.5308 702.4824 Lf*U*u0.8 0.05 0 0 k1 D220.0576 709.3896 m219.4619 711.9736 L216.5093 712.3506 L215.4893 715.0693 L212.7964 714.3984 L210.7026 715.1777 L208.4297 714.8076 L206.5996 713.3281 L204.8154 712.1055 L202.562 711.166 L200.417 709.6787 L201.1685 706.9502 L201.3521 704.8564 L200.2925 702.4805 L202.0078 700.6455 L202.6685 698.3311 L204.6758 697.0801 L206.3501 695.5703 L208.6748 695.6201 L210.7026 694.7705 L213.0273 694.6777 L215.3384 695.2871 L217.2842 696.7559 L219.0786 698.3652 L219.876 700.5586 L221.5308 702.4824 L220.144 704.8574 L221.7686 707.3838 L220.0576 709.3896 Lf0 D213.3643 700.751 m211.7124 699.2471 L209.4932 698.957 L207.2388 698.9307 L204.8857 699.8711 L204.168 702.3311 L203.8892 704.5566 L204.4077 706.5938 L205.3101 708.6699 L207.1519 710.1582 L209.4937 710.8486 L211.5278 709.6348 L213.9209 709.0596 L214.9468 706.8359 L214.9829 704.5566 L215.1221 702.2998 L213.3643 700.751 Lf*U*u1 g1 D214.9468 706.8359 m213.9209 709.0596 L211.5278 709.6348 L209.4937 710.8486 L207.1519 710.1582 L205.3101 708.6699 L204.4077 706.5938 L203.8892 704.5566 L204.168 702.3311 L204.8857 699.8711 L207.2388 698.9307 L209.4932 698.957 L211.7124 699.2471 L213.3643 700.751 L215.1221 702.2998 L214.9829 704.5566 L214.9468 706.8359 Lf0 D211.2983 700.625 m208.9312 699.7266 L206.3926 700.3105 L205.623 702.9238 L206.6836 705.1064 L208.9307 706.1777 L211.1777 705.2363 L212.4575 702.9238 L211.2983 700.625 Lf*U0 g208.9307 706.1777 m206.6836 705.1064 L205.623 702.9238 L206.3926 700.3105 L208.9312 699.7266 L211.2983 700.625 L212.4575 702.9238 L211.1777 705.2363 L208.9307 706.1777 LfUu*u0.15 1 1 0 k1 D291.1367 670.5342 m292.6582 675.1621 L293.5713 680.3916 L294.3896 686.1523 L294.2832 692.2227 L292.1016 700.5625 L294.1143 714.2734 L290.8682 728.5684 L291.2031 745.0859 L286.7852 745.9824 L283.6064 747.4707 L281.3516 751.7256 L277.3604 752.9443 L271.5664 750.2354 L267.7104 751.8047 L263.1802 751.4941 L258.4072 750.1768 L253.314 749.04 L244.6753 749.1973 L236.8975 745.666 L228.8809 743.8145 L228.9844 738.7041 L226.0762 734.6094 L225.3364 729.5156 L224.2158 723.9121 L226.0503 716.5557 L227.5181 709.127 L228.104 699.999 L228.5298 686.0234 L229.9668 672.5127 L234.3247 672.4785 L238.2529 672.1572 L244.4561 676.3027 L248.8813 677.2676 L254.7979 678.5107 L261.4893 685.8105 L261.5249 685.8506 L267.752 680.1201 L272.4531 680.1768 L276.7017 679.209 L281.4668 677.3896 L291.1367 670.5342 Lf0 D274.5234 703.9404 m272.3164 701.375 L271.2544 698.4502 L268.8608 696.3037 L266.2671 694.3457 L263.1855 693.5342 L260.0854 693.6582 L257.3823 694.7891 L254.2822 694.7246 L252.0498 696.7363 L249.3735 698.4053 L248.4922 701.4912 L246.2056 703.9365 L247.6187 707.1064 L247.3735 709.8955 L246.3716 713.5342 L249.2319 715.5176 L252.2363 716.7705 L254.6147 718.4014 L257.0552 720.374 L260.0854 720.8672 L262.877 719.8281 L266.4678 720.7227 L267.8276 717.0977 L271.7646 716.5947 L272.5586 713.1504 L274.8408 710.4746 L272.6738 707.1064 L274.5234 703.9404 Lf*U*u0.8 0.05 0 0 k1 D272.5586 713.1504 m271.7646 716.5947 L267.8276 717.0977 L266.4678 720.7227 L262.877 719.8281 L260.0854 720.8672 L257.0552 720.374 L254.6147 718.4014 L252.2363 716.7705 L249.2319 715.5176 L246.3716 713.5342 L247.3735 709.8955 L247.6187 707.1064 L246.2056 703.9365 L248.4922 701.4912 L249.3735 698.4053 L252.0498 696.7363 L254.2822 694.7246 L257.3823 694.7891 L260.0854 693.6582 L263.1855 693.5342 L266.2671 694.3457 L268.8608 696.3037 L271.2544 698.4502 L272.3164 701.375 L274.5234 703.9404 L272.6738 707.1064 L274.8408 710.4746 L272.5586 713.1504 Lf0 D264.0718 701.6143 m261.8696 699.6094 L258.9106 699.2236 L255.9048 699.1895 L252.7676 700.4414 L251.8105 703.7217 L251.439 706.6885 L252.1304 709.4072 L253.333 712.1738 L255.7886 714.1582 L258.9111 715.0791 L261.6235 713.46 L264.814 712.6934 L266.1821 709.7285 L266.2305 706.6895 L266.416 703.6807 L264.0718 701.6143 Lf*U*u1 g1 D266.1821 709.7285 m264.814 712.6934 L261.6235 713.46 L258.9111 715.0791 L255.7886 714.1582 L253.333 712.1738 L252.1304 709.4072 L251.439 706.6885 L251.8105 703.7217 L252.7676 700.4414 L255.9048 699.1895 L258.9106 699.2236 L261.8696 699.6094 L264.0718 701.6143 L266.416 703.6807 L266.2305 706.6895 L266.1821 709.7285 Lf0 D261.4312 702.0967 m258.2754 700.8984 L254.8911 701.6777 L253.8647 705.1621 L255.2783 708.0723 L258.2754 709.5 L261.2705 708.2451 L262.9771 705.1621 L261.4312 702.0967 Lf*U0 g258.2754 709.5 m255.2783 708.0723 L253.8647 705.1621 L254.8911 701.6777 L258.2754 700.8984 L261.4312 702.0967 L262.9771 705.1621 L261.2705 708.2451 L258.2754 709.5 LfUu*u0.15 1 1 0 k1 D341.9219 675.7021 m343.8223 680.6787 L344.9639 686.2422 L345.9873 692.2402 L345.8545 698.4541 L343.1289 706.4189 L345.6436 719.0654 L341.5859 731.4229 L342.0049 746.3926 L336.792 747.5117 L333.0527 749.374 L330.7773 754.6924 L326.1865 756.2148 L319.8457 752.8291 L315.5684 754.79 L310.5742 754.4043 L305.4922 752.7539 L300.1914 751.3359 L291.5996 751.5303 L284.9238 747.1182 L277.3516 744.8027 L277.4805 739.1738 L273.8457 735.0195 L272.9214 729.5977 L271.52 723.8057 L273.812 716.5684 L275.647 709.3994 L276.3804 700.7764 L276.9126 688.0908 L278.709 675.9248 L283.5693 675.2021 L287.8682 674.0918 L294.5313 678.0068 L299.2793 678.3057 L305.2383 678.1924 L311.877 685.3164 L311.9063 685.3477 L318.6445 679.6055 L323.1367 681.5527 L327.5391 681.5771 L332.25 680.9922 L341.9219 675.7021 Lf0 D327.5156 706.2021 m324.7578 702.9961 L323.4297 699.3418 L320.4375 696.6582 L317.1953 694.2109 L313.3438 693.1953 L309.4688 693.3506 L306.0898 694.7646 L302.2148 694.6836 L299.4238 697.1992 L296.0781 699.2852 L294.9766 703.1416 L292.1191 706.2002 L293.8848 710.1611 L293.5781 713.6484 L292.3252 718.1973 L295.9014 720.6758 L299.6563 722.2412 L302.6299 724.2793 L305.6797 726.7451 L309.4688 727.3623 L312.958 726.0625 L317.4473 727.1816 L319.1465 722.6504 L324.0684 722.0225 L325.0605 717.7148 L327.9121 714.3721 L325.2051 710.1611 L327.5156 706.2021 Lf*U*u0.8 0.05 0 0 k1 D325.0605 717.7148 m324.0684 722.0225 L319.1465 722.6504 L317.4473 727.1816 L312.958 726.0625 L309.4688 727.3623 L305.6797 726.7451 L302.6299 724.2793 L299.6563 722.2412 L295.9014 720.6758 L292.3252 718.1973 L293.5781 713.6484 L293.8848 710.1611 L292.1191 706.2002 L294.9766 703.1416 L296.0781 699.2852 L299.4238 697.1992 L302.2148 694.6836 L306.0898 694.7646 L309.4688 693.3506 L313.3438 693.1953 L317.1953 694.2109 L320.4375 696.6582 L323.4297 699.3418 L324.7578 702.9961 L327.5156 706.2021 L325.2051 710.1611 L327.9121 714.3721 L325.0605 717.7148 Lf0 D314.7803 703.2842 m312.0273 700.7773 L308.3301 700.2949 L304.5713 700.252 L300.6494 701.8184 L299.4541 705.918 L298.9893 709.6279 L299.8535 713.0234 L301.3564 716.4824 L304.4268 718.9648 L308.3291 720.1152 L311.7197 718.0898 L315.708 717.1318 L317.418 713.4268 L317.4785 709.6279 L317.7109 705.8672 L314.7803 703.2842 Lf*U*u1 g1 D317.418 713.4268 m315.708 717.1318 L311.7197 718.0898 L308.3291 720.1152 L304.4268 718.9648 L301.3564 716.4824 L299.8535 713.0234 L298.9893 709.6279 L299.4541 705.918 L300.6494 701.8184 L304.5713 700.252 L308.3301 700.2949 L312.0273 700.7773 L314.7803 703.2842 L317.7109 705.8672 L317.4785 709.6279 L317.418 713.4268 Lf0 D311.5664 704.373 m307.6211 702.876 L303.3906 703.8496 L302.1074 708.2051 L303.875 711.8438 L307.6201 713.6289 L311.3652 712.0605 L313.498 708.2061 L311.5664 704.373 Lf*U0 g307.6201 713.6289 m303.875 711.8438 L302.1074 708.2051 L303.3906 703.8496 L307.6211 702.876 L311.5664 704.373 L313.498 708.2061 L311.3652 712.0605 L307.6201 713.6289 LfUu*u0.15 1 1 0 k1 D392.7061 681.6826 m394.9863 687.0078 L396.3564 692.9043 L397.585 699.1406 L397.4258 705.498 L394.1543 713.0869 L397.1719 724.6699 L392.3027 735.0908 L392.8057 748.5127 L386.7988 749.8545 L382.498 752.0879 L380.2031 758.4697 L375.0127 760.2979 L368.125 756.2354 L363.4258 758.5879 L357.9688 758.124 L352.5752 756.1455 L347.0703 754.4424 L338.5225 754.6768 L332.9512 749.3818 L325.8213 746.6045 L325.9766 740.4561 L321.6152 736.2422 L320.5059 730.4922 L318.8242 724.5117 L321.5752 717.3926 L323.7773 710.4844 L324.6563 702.3662 L325.2949 690.9717 L327.4502 680.1504 L332.8125 678.7383 L337.4824 676.8379 L344.6064 680.5254 L349.6768 680.1553 L355.6787 678.6865 L362.2656 685.6338 L362.2861 685.6572 L369.5352 679.9043 L373.8203 683.7412 L378.376 684.7588 L383.0332 685.4072 L392.7061 681.6826 Lf0 D380.5088 709.2783 m377.1973 705.4307 L375.6035 701.0439 L372.0137 697.8242 L368.123 694.8877 L363.501 693.6689 L358.8516 693.8564 L354.7959 695.5527 L350.1465 695.4551 L346.7979 698.4736 L342.7832 700.9775 L341.4619 705.6055 L338.0313 709.2744 L340.1494 714.0283 L339.7822 718.2129 L338.2803 723.6709 L342.5703 726.6455 L347.0771 728.5254 L350.6445 730.9697 L354.3047 733.9297 L358.8506 734.6689 L363.0381 733.1104 L368.4258 734.4531 L370.4648 729.0156 L376.3711 728.2607 L377.5615 723.0938 L380.9834 719.0811 L377.7344 714.0283 L380.5088 709.2783 Lf*U*u0.8 0.05 0 0 k1 D377.5615 723.0938 m376.3711 728.2607 L370.4648 729.0156 L368.4258 734.4531 L363.0381 733.1104 L358.8506 734.6689 L354.3047 733.9297 L350.6445 730.9697 L347.0771 728.5254 L342.5703 726.6455 L338.2803 723.6709 L339.7822 718.2129 L340.1494 714.0283 L338.0313 709.2744 L341.4619 705.6055 L342.7832 700.9775 L346.7979 698.4736 L350.1465 695.4551 L354.7959 695.5527 L358.8516 693.8564 L363.501 693.6689 L368.123 694.8877 L372.0137 697.8242 L375.6035 701.0439 L377.1973 705.4307 L380.5088 709.2783 L377.7344 714.0283 L380.9834 719.0811 L377.5615 723.0938 Lf0 D365.4883 705.7656 m362.1846 702.7578 L357.7471 702.1787 L353.2373 702.1279 L348.5313 704.0068 L347.0967 708.9268 L346.5391 713.3779 L347.5752 717.4541 L349.3789 721.6045 L353.0635 724.582 L357.7461 725.9629 L361.8154 723.5332 L366.6006 722.3838 L368.6533 717.9365 L368.7256 713.3779 L369.0049 708.8662 L365.4883 705.7656 Lf*U*u1 g1 D368.6533 717.9365 m366.6006 722.3838 L361.8154 723.5332 L357.7461 725.9629 L353.0635 724.582 L349.3789 721.6045 L347.5752 717.4541 L346.5391 713.3779 L347.0967 708.9268 L348.5313 704.0068 L353.2373 702.1279 L357.7471 702.1787 L362.1846 702.7578 L365.4883 705.7656 L369.0049 708.8662 L368.7256 713.3779 L368.6533 717.9365 Lf0 D361.6992 707.4629 m356.9658 705.667 L351.8887 706.835 L350.3496 712.0625 L352.4697 716.4277 L356.9648 718.5693 L361.458 716.6875 L364.0186 712.0625 L361.6992 707.4629 Lf*U0 g356.9648 718.5693 m352.4697 716.4277 L350.3496 712.0625 L351.8887 706.835 L356.9658 705.667 L361.6992 707.4629 L364.0186 712.0625 L361.458 716.6875 L356.9648 718.5693 LfUu*u0.15 1 1 0 k1 D443.4902 687.8643 m446.1504 693.5381 L447.75 699.7686 L449.1816 706.2422 L448.9971 712.7432 L445.1797 719.957 L448.7002 730.4756 L443.0205 738.958 L443.6074 750.833 L436.8066 752.3994 L431.9443 755.0049 L429.6289 762.4502 L423.8379 764.583 L416.4043 759.8428 L411.2832 762.5879 L405.3633 762.0469 L399.6602 759.7383 L393.9482 757.752 L385.4463 758.0254 L380.9766 751.8467 L374.292 748.6055 L374.4727 741.9385 L369.3838 737.666 L368.0898 731.5889 L366.1289 725.4189 L369.3369 718.418 L371.9063 711.7725 L372.9326 704.1572 L373.6768 694.0537 L376.1924 684.5771 L382.0566 682.4746 L387.0977 679.7861 L394.6816 683.2451 L400.0742 682.2061 L406.1191 679.3818 L412.6523 686.1533 L412.668 686.168 L420.4268 680.4023 L424.5049 686.1318 L429.2129 688.1406 L433.8174 690.0234 L443.4902 687.8643 Lf0 D433.5 712.5557 m429.6377 708.0664 L427.7793 702.9492 L423.5898 699.1924 L419.0518 695.7666 L413.6592 694.3447 L408.2344 694.5635 L403.5029 696.542 L398.0771 696.4277 L394.1709 699.9502 L389.4883 702.8711 L387.9453 708.2695 L383.9443 712.5508 L386.417 718.0967 L385.9873 722.9785 L384.2344 729.3467 L389.2402 732.8164 L394.4971 735.0088 L398.6602 737.8633 L402.9307 741.3154 L408.2334 742.1787 L413.1191 740.3594 L419.4033 741.9268 L421.7822 735.5811 L428.6729 734.7021 L430.0625 728.6738 L434.0557 723.9922 L430.2637 718.0977 L433.5 712.5557 Lf*U*u0.8 0.05 0 0 k1 D430.0625 728.6738 m428.6729 734.7021 L421.7822 735.5811 L419.4033 741.9268 L413.1191 740.3594 L408.2334 742.1787 L402.9307 741.3154 L398.6602 737.8633 L394.4971 735.0088 L389.2402 732.8164 L384.2344 729.3467 L385.9873 722.9785 L386.417 718.0967 L383.9443 712.5508 L387.9453 708.2695 L389.4883 702.8711 L394.1709 699.9502 L398.0771 696.4277 L403.5029 696.542 L408.2344 694.5635 L413.6592 694.3447 L419.0518 695.7666 L423.5898 699.1924 L427.7793 702.9492 L429.6377 708.0664 L433.5 712.5557 L430.2637 718.0977 L434.0557 723.9922 L430.0625 728.6738 Lf0 D416.1953 708.4492 m412.3428 704.9404 L407.165 704.2646 L401.9033 704.2051 L396.4131 706.3965 L394.7393 712.1367 L394.0879 717.3301 L395.2979 722.085 L397.4023 726.9287 L401.7012 730.4014 L407.165 732.0127 L411.9111 729.1777 L417.4951 727.8369 L419.8887 722.6484 L419.9727 717.3301 L420.2979 712.0654 L416.1953 708.4492 Lf*U*u1 g1 D419.8887 722.6484 m417.4951 727.8369 L411.9111 729.1777 L407.165 732.0127 L401.7012 730.4014 L397.4023 726.9287 L395.2979 722.085 L394.0879 717.3301 L394.7393 712.1367 L396.4131 706.3965 L401.9033 704.2051 L407.165 704.2646 L412.3428 704.9404 L416.1953 708.4492 L420.2979 712.0654 L419.9727 717.3301 L419.8887 722.6484 Lf0 D411.833 710.7539 m406.3105 708.6582 L400.3867 710.0215 L398.5918 716.1191 L401.0654 721.2119 L406.3096 723.7109 L411.5518 721.5156 L414.5381 716.1191 L411.833 710.7539 Lf*U0 g406.3096 723.7109 m401.0654 721.2119 L398.5918 716.1191 L400.3867 710.0215 L406.3105 708.6582 L411.833 710.7539 L414.5381 716.1191 L411.5518 721.5156 L406.3096 723.7109 LfUu*u0.15 1 1 0 k1 D494.2754 694.9717 m497.3154 700.9932 L499.1426 707.5557 L500.7793 714.2666 L500.5684 720.9131 L496.2061 727.749 L500.2295 737.2051 L493.7383 743.751 L494.4082 754.0771 L486.8135 755.8662 L481.3906 758.8447 L479.0547 767.3535 L472.665 769.791 L464.6846 764.373 L459.1426 767.5117 L452.7578 766.8926 L446.7441 764.2549 L440.8262 761.9844 L432.3711 762.2969 L429.0039 755.2354 L422.7627 751.5322 L422.9697 744.3457 L417.1533 740.0127 L415.6748 733.6094 L413.4326 727.251 L417.1016 720.3682 L420.0361 713.9814 L421.209 706.873 L422.0605 698.0596 L424.9346 689.9268 L431.3018 687.1367 L436.7139 683.6572 L444.7578 686.8867 L450.4727 685.1807 L456.5596 681.001 L463.042 687.5967 L463.0498 687.6035 L471.3184 681.8262 L475.1885 689.4463 L480.0498 692.4473 L484.6006 695.5645 L494.2754 694.9717 Lf0 D486.4932 716.7568 m482.0791 711.626 L479.9551 705.7773 L475.168 701.4844 L469.9805 697.5693 L463.8174 695.9443 L457.6172 696.1934 L452.21 698.4551 L446.0107 698.3242 L441.5459 702.3496 L436.1934 705.6885 L434.4316 711.8594 L429.8574 716.751 L432.6826 723.0898 L432.1934 728.6689 L430.1895 735.9463 L435.9102 739.9121 L441.9189 742.418 L446.6758 745.6797 L451.5566 749.624 L457.6172 750.6104 L463.2002 748.5322 L470.3828 750.3232 L473.1016 743.0723 L480.9766 742.0664 L482.5645 735.1758 L487.1279 729.8271 L482.7949 723.0898 L486.4932 716.7568 Lf*U*u0.8 0.05 0 0 k1 D482.5645 735.1758 m480.9766 742.0664 L473.1016 743.0723 L470.3828 750.3232 L463.2002 748.5322 L457.6172 750.6104 L451.5566 749.624 L446.6758 745.6797 L441.9189 742.418 L435.9102 739.9121 L430.1895 735.9463 L432.1934 728.6689 L432.6826 723.0898 L429.8574 716.751 L434.4316 711.8594 L436.1934 705.6885 L441.5459 702.3496 L446.0107 698.3242 L452.21 698.4551 L457.6172 696.1934 L463.8174 695.9443 L469.9805 697.5693 L475.168 701.4844 L479.9551 705.7773 L482.0791 711.626 L486.4932 716.7568 L482.7949 723.0898 L487.1279 729.8271 L482.5645 735.1758 Lf0 D466.9053 712.0566 m462.5 708.0459 L456.583 707.2744 L450.5693 707.2061 L444.2949 709.7109 L442.3828 716.2705 L441.6396 722.2061 L443.0215 727.6406 L445.4268 733.1748 L450.3389 737.1455 L456.582 738.9863 L462.0078 735.7471 L468.3896 734.2139 L471.126 728.2842 L471.2207 722.2061 L471.5938 716.1895 L466.9053 712.0566 Lf*U*u1 g1 D471.126 728.2842 m468.3896 734.2139 L462.0078 735.7471 L456.582 738.9863 L450.3389 737.1455 L445.4268 733.1748 L443.0215 727.6406 L441.6396 722.2061 L442.3828 716.2705 L444.2949 709.7109 L450.5693 707.2061 L456.583 707.2744 L462.5 708.0459 L466.9053 712.0566 L471.5938 716.1895 L471.2207 722.2061 L471.126 728.2842 Lf0 D461.9668 714.9678 m455.6563 712.5732 L448.8867 714.1318 L446.834 721.1006 L449.6611 726.9219 L455.6553 729.7773 L461.6455 727.2686 L465.0596 721.1006 L461.9668 714.9678 Lf*U0 g455.6553 729.7773 m449.6611 726.9219 L446.834 721.1006 L448.8867 714.1318 L455.6563 712.5732 L461.9668 714.9678 L465.0596 721.1006 L461.6455 727.2686 L455.6553 729.7773 LfUu*u0.15 1 1 0 k1 D552.1387 729.082 m547.2305 735.543 L551.7568 743.9355 L544.4541 748.5449 L545.208 757.3203 L536.8193 759.334 L530.8359 762.6855 L528.4795 772.2578 L521.4893 775 L512.9629 768.9043 L506.998 772.4355 L500.1514 771.7383 L493.8271 768.7715 L487.7031 766.2168 L479.2939 766.5684 L477.0293 758.625 L471.2314 754.457 L471.4639 746.752 L464.9209 742.3613 L463.2578 735.6289 L460.7363 729.082 L464.8623 722.3184 L468.165 716.1934 L469.4844 709.5879 L470.4424 702.0645 L473.6758 695.2773 L480.5449 691.7969 L486.3271 687.5293 L494.832 690.5313 L500.8691 688.1563 L506.999 682.6211 L513.4277 689.0391 L522.209 683.25 L525.8711 692.7598 L530.8857 696.7539 L535.3838 701.1055 L545.0586 702.0762 L548.4795 708.4473 L550.5342 715.3438 L552.377 722.293 L552.1387 729.082 Lf0 D539.4844 720.957 m534.5186 715.1855 L532.1289 708.6055 L526.7432 703.7773 L520.9082 699.3711 L513.9746 697.543 L506.999 697.8242 L500.917 700.3691 L493.9414 700.2207 L488.918 704.75 L482.8975 708.5059 L480.9141 715.4473 L475.7695 720.9512 L478.9482 728.082 L478.3965 734.3594 L476.1426 742.5469 L482.5781 747.0078 L489.3379 749.8262 L494.6895 753.4961 L500.1807 757.9336 L506.999 759.043 L513.2803 756.7051 L521.3604 758.7207 L524.4199 750.5625 L533.2783 749.4316 L535.0645 741.6797 L540.1982 735.6621 L535.3242 728.082 L539.4844 720.957 Lf*U*u0.8 0.05 0 0 k1 D535.0645 741.6797 m533.2783 749.4316 L524.4199 750.5625 L521.3604 758.7207 L513.2803 756.7051 L506.999 759.043 L500.1807 757.9336 L494.6895 753.4961 L489.3379 749.8262 L482.5781 747.0078 L476.1426 742.5469 L478.3965 734.3594 L478.9482 728.082 L475.7695 720.9512 L480.9141 715.4473 L482.8975 708.5059 L488.918 704.75 L493.9414 700.2207 L500.917 700.3691 L506.999 697.8242 L513.9746 697.543 L520.9082 699.3711 L526.7432 703.7773 L532.1289 708.6055 L534.5186 715.1855 L539.4844 720.957 L535.3242 728.082 L540.1982 735.6621 L535.0645 741.6797 Lf0 D517.6113 715.6641 m512.6572 711.1523 L506 710.2832 L499.2354 710.207 L492.1768 713.0254 L490.0244 720.4043 L489.1875 727.082 L490.7432 733.1953 L493.4492 739.4219 L498.9746 743.8887 L505.999 745.959 L512.1025 742.3164 L519.2813 740.5918 L522.3594 733.9199 L522.4678 727.082 L522.8857 720.3145 L517.6113 715.6641 Lf*U*u1 g1 D522.3594 733.9199 m519.2813 740.5918 L512.1025 742.3164 L505.999 745.959 L498.9746 743.8887 L493.4492 739.4219 L490.7432 733.1953 L489.1875 727.082 L490.0244 720.4043 L492.1768 713.0254 L499.2354 710.207 L506 710.2832 L512.6572 711.1523 L517.6113 715.6641 L522.8857 720.3145 L522.4678 727.082 L522.3594 733.9199 Lf0 D512.1006 719.1836 m505 716.4883 L497.3838 718.2422 L495.0752 726.082 L498.2568 732.6309 L504.998 735.8438 L511.7383 733.0195 L515.5791 726.082 L512.1006 719.1836 Lf*U0 g504.998 735.8438 m498.2568 732.6309 L495.0752 726.082 L497.3838 718.2422 L505 716.4883 L512.1006 719.1836 L515.5791 726.082 L511.7383 733.0195 L504.998 735.8438 LfU/ShapeBlendPathID (A) XT/ShapeBlendPathType (K) XTUu0 R0.75 0.9 0 0 K2 w151.084 272.3184 m151.084 274.6406 92.5039 274.6406 Y152.9937 260.4258 L151.084 274.6406 151.084 272.3184 Vs227.5957 272.6494 m227.5957 274.6406 188.5469 274.6406 188.5469 271.6543 C188.5469 274.6406 232.2856 263.2246 232.2856 260.5703 C232.2856 263.2246 227.5957 274.6406 227.5957 272.6494 Cs103.5039 257.9609 m103.5039 259.6201 131.0869 259.752 131.0869 259.4199 C131.0869 259.752 103.5039 266.2334 103.5039 264.2422 C103.5039 266.2334 103.5039 259.6201 103.5039 257.9609 Cs285.3789 265.8223 m277.4937 274.6406 277.4937 273.9766 V277.4937 274.6406 257.1304 274.6406 257.1304 272.6494 C257.1304 274.6406 285.3789 265.8223 Ys172.2939 258.9531 m172.2939 259.9482 220.1377 260.1768 220.1377 257.5225 C220.1377 260.1768 170.5249 273.127 170.5249 272.4629 C170.5249 273.127 172.2939 259.9482 172.2939 258.9531 Cs340.9971 265.5039 m340.9971 267.8262 330.7627 274.6406 330.7627 273.3135 C330.7627 274.6406 317.2988 274.6406 317.2988 272.3184 C317.2988 274.6406 340.9971 267.8262 340.9971 265.5039 Cs391.416 268.79 m391.416 271.1123 387.9043 274.6406 387.9043 272.9814 C387.9043 274.6406 378.2188 274.6406 378.2188 272.3184 C378.2188 274.6406 391.416 271.1123 391.416 268.79 Cs252.7617 257.3467 m252.7617 260.333 280.0078 260.4629 280.0078 258.8037 C280.0078 260.4629 248.6924 270.2383 248.6924 268.9102 C248.6924 270.2383 252.7617 260.333 252.7617 257.3467 Cs420.9229 260.8037 m420.9229 261.1348 461.2773 261.3281 461.2773 259.6689 C461.2773 261.3281 417.1348 274.6406 417.1348 271.6543 C417.1348 274.6406 407.4766 274.6406 407.4766 272.9814 C407.4766 274.6406 420.9229 261.1348 420.9229 260.8037 Cs350.7656 272.6494 m350.7656 274.6406 371.4023 260.8994 371.4023 258.2451 C371.4023 260.8994 405.3906 261.0615 405.3906 260.0664 C405.3906 261.0615 354.5869 274.6406 354.5869 271.6543 C354.5869 274.6406 350.7656 274.6406 350.7656 272.6494 Cs309.5537 257.6182 m309.5537 260.6035 342.4834 260.7617 Y297.9648 273.5625 297.9648 273.2305 V297.9648 273.5625 309.5537 260.6035 309.5537 257.6182 Cs0 O(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p49 274.0459 m66.999 273.9199 84.2749 273.2578 84.2749 271.9863 C84.2749 274.6406 84.2749 276.5742 84.2749 275.2471 C84.2749 276.5742 92.5039 274.6406 92.5039 271.6543 C92.5039 274.6406 151.084 274.6406 151.084 271.9863 C151.084 274.6406 149.7227 284.7744 149.7227 281.7881 C149.7227 284.7744 188.5469 274.6406 188.5469 273.9766 C188.5469 274.6406 227.5957 274.6406 Y223.252 285.2158 223.252 283.2246 V223.252 285.2158 235.9927 281.2383 235.9927 278.916 C227.9077 285.5049 241.6543 289.1084 258.6816 288.0889 C257.4399 294.0859 257.2378 297.2656 260.438 296.7041 c265.6938 302.7939 249.7358 306.0674 231.8306 304.5488 C217.5854 300.9766 205.5161 292.6543 193.6426 301.0176 c183.2344 308.3486 209.1011 309.3975 231.8306 305.2119 C239.9102 311.2539 248.689 314.4063 258.5293 313.625 c271.2002 312.6211 293.499 316.1172 308.4473 317.502 C295.1348 325.6973 269.6763 330.3281 305.2871 327.5605 c333.0625 330.126 325.585 324.7852 308.4473 317.834 C314.5771 317.6045 318.1338 314.8613 311.9668 310.6396 c301.7549 308.0547 324.9551 308.9209 345.7363 311.2578 C350.6152 319.7813 354.25 328.0742 369.2207 320.9248 c381.7637 319.2031 364.7637 314.668 345.7363 309.2666 C342.0625 306.0029 337.6855 300.3291 327.2344 300.6855 c315.8613 301.0732 325.6465 294.1787 340.5117 286.2725 C351.791 289.1641 363.334 290.1826 372.2734 289.3438 C372.2734 290.3389 365.5957 297.0469 365.5957 294.0605 C365.5957 297.0469 439.8945 274.6406 439.8945 272.9814 C439.8945 273.9316 484.168 274.3379 521.999 274.2617 CB28.9907 273.96 m35.1519 274.0645 42.1289 274.0947 49 274.0459 CB33 331.3643 m17.7217 331.1758 8.9995 330.96 8.9995 330.7129 C8.9995 332.7031 8.9995 274.6406 8.9995 272.6494 C8.9995 273.3223 17.6021 273.7676 28.9907 273.96 CB370 332.4297 m241.9287 332.3848 90.7031 332.0752 33 331.3643 CB423 332.4336 m406.0283 332.4375 388.249 332.4365 370 332.4297 CB453.001 332.4219 m443.3506 332.4277 433.3252 332.4316 423 332.4336 CB475.9941 332.4043 m468.6113 332.4111 460.9326 332.417 453.001 332.4219 CB511.002 332.3584 m500.333 332.377 488.5938 332.3926 475.9941 332.4043 CB529.0244 332.3213 m523.4336 332.335 517.4111 332.3477 511.002 332.3584 CB545.0186 332.2754 m540.1885 332.292 534.8398 332.3076 529.0244 332.3213 CB541.998 274.1699 m560.917 274.0293 574.8555 273.7402 574.8555 273.3135 C574.8555 274.6406 574.8555 332.7031 574.8555 332.04 C574.8555 332.1328 563.8926 332.2119 545.0186 332.2754 CB521.999 274.2617 m528.9922 274.2471 535.7656 274.2168 541.998 274.1699 CB348.2041 274.0244 m348.2041 276.3467 350.7656 274.6406 350.7656 271.9863 C350.7656 274.6406 354.5869 274.6406 354.5869 273.3135 C354.5869 274.6406 348.2041 276.3467 348.2041 274.0244 Cb247.0796 276.7822 m247.0796 277.7773 257.1304 274.6406 257.1304 273.9766 C257.1304 274.6406 277.4937 274.6406 277.4937 273.6445 C277.4937 274.6406 263.7153 290.0488 263.7153 287.3945 C263.7153 290.0488 317.2988 274.6406 317.2988 273.3135 C317.2988 274.6406 330.7627 274.6406 330.7627 272.9814 C330.7627 274.6406 312.4238 286.8525 312.4238 285.5254 C306.9297 286.9492 302.6855 287.4844 300.5156 287.7461 c294.7871 292.0605 275.1973 292.3281 258.6816 288.4199 C261.9487 281.9443 272.4146 272.0166 247.0796 276.7822 Cb417.1348 272.6494 m417.1348 274.6406 403.334 278.8027 403.334 276.8115 C403.334 278.8027 407.4766 274.6406 407.4766 271.9863 C407.4766 274.6406 417.1348 274.6406 417.1348 272.6494 Cb378.2188 272.9814 m378.2188 274.6406 387.9043 274.6406 387.9043 274.3086 C387.9043 274.6406 381.748 280.8232 381.748 278.501 C371.9434 278.2715 354.1055 282.8545 340.5117 287.9316 C337.002 287.9834 333.5215 287.7158 330.1504 285.8301 C330.1504 287.4883 378.2188 274.6406 378.2188 272.9814 Cb300.5156 288.4102 m302.6855 287.4844 306.9297 286.9492 312.4238 286.1895 C312.4238 286.8525 298.9395 295.832 Y330.1504 287.4883 330.1504 285.166 V333.5215 287.7158 337.002 287.9834 340.5117 287.2676 C325.6465 294.1787 315.8613 301.0732 327.2344 300.3535 c337.6855 300.3291 342.0625 306.0029 345.7363 310.5938 C324.9551 308.9209 301.7549 308.0547 311.9668 310.6396 c318.1338 314.8613 314.5771 317.6045 308.4473 319.1602 C293.499 316.1172 271.2002 312.6211 258.5293 310.6396 c248.689 314.4063 239.9102 311.2539 231.8306 306.8711 C249.7358 306.0674 265.6938 302.7939 260.438 299.0273 c257.2378 297.2656 257.4399 294.0859 258.6816 290.0791 C275.1973 292.3281 294.7871 292.0605 300.5156 288.4102 cBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB369.2207 321.9199 m354.25 328.0742 350.6152 319.7813 345.7363 310.9258 C364.7637 314.668 381.7637 319.2031 369.2207 321.9199 cBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB258.6816 288.752 m241.6543 289.1084 227.9077 285.5049 235.9927 280.2432 C235.9927 281.2383 247.0796 277.7773 247.0796 277.4463 C272.4146 272.0166 261.9487 281.9443 258.6816 288.752 CBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB381.748 279.8281 m381.748 280.8232 372.2734 290.3389 372.2734 287.6846 C363.334 290.1826 351.791 289.1641 340.5117 287.9316 C354.1055 282.8545 371.9434 278.2715 381.748 279.8281 CBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB305.2871 329.8828 m269.6763 330.3281 295.1348 325.6973 308.4473 319.8242 C325.585 324.7852 333.0625 330.126 305.2871 329.8828 cBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB193.6426 300.3535 m205.5161 292.6543 217.5854 300.9766 231.8306 305.876 C209.1011 309.3975 183.2344 308.3486 193.6426 300.3535 cBb0 0 0 0 Bh1 (Yellow & Orange Radial) 302.3506 318.8965 0 93.6051 0.9542 0 0 0.3318 185.0759 2953.6206 Bg89.3205 0 0 -31.057 289.877 303.1396 Bmb2 BB*u1 D0 g372.2734 287.6846 m372.2734 290.3389 381.748 280.8232 381.748 279.8281 C381.748 280.8232 387.9043 274.6406 387.9043 273.3135 C387.9043 274.6406 391.416 271.1123 391.416 269.4531 C391.416 271.1123 378.2188 274.6406 Y330.1504 287.4883 330.1504 286.8252 V330.1504 287.4883 298.9395 295.832 298.9395 293.5088 C298.9395 295.832 312.4238 286.8525 312.4238 286.5205 C312.4238 286.8525 330.7627 274.6406 330.7627 273.9766 C330.7627 274.6406 340.9971 267.8262 340.9971 266.499 C340.9971 267.8262 317.2988 274.6406 317.2988 272.6494 C317.2988 274.6406 263.7153 290.0488 263.7153 287.0625 C263.7153 290.0488 277.4937 274.6406 277.4937 274.3086 C277.4937 274.6406 285.3789 265.8223 Y257.1304 274.6406 257.1304 272.3184 V257.1304 274.6406 247.0796 277.7773 247.0796 276.4512 C247.0796 277.7773 235.9927 281.2383 235.9927 280.9063 C235.9927 281.2383 223.252 285.2158 223.252 284.2207 C223.252 285.2158 227.5957 274.6406 227.5957 271.9863 C227.5957 274.6406 232.2856 263.2246 232.2856 261.8975 C232.2856 263.2246 188.5469 274.6406 188.5469 273.6445 C188.5469 274.6406 149.7227 284.7744 149.7227 282.1201 C149.7227 284.7744 151.084 274.6406 151.084 273.9766 C151.084 274.6406 152.9937 260.4258 152.9937 260.0938 C152.9937 260.4258 92.5039 274.6406 92.5039 273.3135 C92.5039 274.6406 84.2749 276.5742 84.2749 274.252 C84.2749 276.5742 84.2749 274.6406 84.2749 272.6494 C84.2749 274.6406 84.2749 255.8564 84.2749 252.8701 C84.2749 255.8564 146.4043 256.1523 146.4043 253.8301 C146.4043 256.1523 173.6636 249.7471 173.6636 247.7568 C173.6636 249.7471 172.7866 256.2793 172.7866 255.6152 C172.7866 256.2793 233.9546 256.5703 233.9546 254.5801 C233.9546 256.5703 256.7515 250.6201 256.7515 247.6338 C256.7515 250.6201 254.2671 256.668 254.2671 256.3359 C254.2671 256.668 291.5957 256.8457 291.5957 255.8506 C291.5957 256.8457 321.1699 247.6143 321.1699 244.96 C321.1699 247.6143 312.8242 256.9473 312.8242 256.2832 C312.8242 256.9473 355.0449 257.1484 355.0449 254.1621 C355.0449 257.1484 393.748 246.0195 393.748 243.3652 C393.748 246.0195 376.8789 257.2529 Y418.8906 257.4531 L426.6543 255.3779 426.6543 255.0459 V426.6543 255.3779 424.5605 257.4805 424.5605 255.4902 C424.5605 257.4805 495.6699 257.8203 495.6699 257.4883 C495.6699 257.8203 439.8945 274.6406 439.8945 271.9863 C439.8945 274.6406 365.5957 297.0469 365.5957 295.0566 C365.5957 297.0469 372.2734 290.3389 372.2734 287.6846 Cb0 D0 g103.5039 256.6348 m103.5039 259.6201 103.5039 266.2334 103.5039 265.5703 C103.5039 266.2334 131.0869 259.752 131.0869 258.0928 C131.0869 259.752 103.5039 259.6201 103.5039 256.6348 Cb0 g172.2939 257.2939 m172.2939 259.9482 170.5249 273.127 Y220.1377 260.1768 220.1377 257.8545 V220.1377 260.1768 172.2939 259.9482 172.2939 257.2939 Cb0 g252.7617 259.0059 m252.7617 260.333 248.6924 270.2383 248.6924 268.2471 C248.6924 270.2383 280.0078 260.4629 280.0078 258.4717 C280.0078 260.4629 252.7617 260.333 252.7617 259.0059 Cb0 g309.5537 258.6133 m309.5537 260.6035 297.9648 273.5625 297.9648 272.8994 C297.9648 273.5625 342.4834 260.7617 342.4834 259.4336 C342.4834 260.7617 309.5537 260.6035 309.5537 258.6133 Cb0 g371.4023 259.2402 m371.4023 260.8994 350.7656 274.6406 350.7656 272.9814 C350.7656 274.6406 348.2041 276.3467 348.2041 275.6836 C348.2041 276.3467 354.5869 274.6406 354.5869 273.3135 C354.5869 274.6406 405.3906 261.0615 405.3906 259.7344 C405.3906 261.0615 371.4023 260.8994 371.4023 259.2402 Cb417.1348 272.6494 m417.1348 274.6406 461.2773 261.3281 Y420.9229 261.1348 420.9229 258.8125 V420.9229 261.1348 407.4766 274.6406 407.4766 273.6445 C407.4766 274.6406 403.334 278.8027 Y417.1348 274.6406 417.1348 272.6494 VBb1 (Chrome) 33.2031 86.9043 0 336.2969 -1.0683 0 0 0.204 8798.7852 3509.0264 Bg-359.2586 0 0 -54.4972 462.2803 297.4551 Xm-8495.4375 0 0 -54.4972 8957.7188 297.4551 Bc-147.296 0 0 -54.4972 462.2803 297.4551 Bm-28.7407 0 0 -54.4972 314.9844 297.4551 Bm-3.5926 0 0 -54.4972 286.2437 297.4551 Bm-32.3333 0 0 -54.4972 282.6509 297.4551 Bm-118.5553 0 0 -54.4972 250.3179 297.4551 Bm-8495.4375 0 0 -54.4972 131.7622 297.4551 Bcb2 BB*UUu*u0 0 0 0 k0 0 0 1 K1 w1 D221.4307 547.1641 m295.3633 475.3594 L359.8711 546.2646 L292.8608 618.061 L221.4307 547.1641 Lb0 D292.6211 605.5078 m347.9844 546.1895 L294.9746 487.9219 L233.9072 547.2319 L292.6211 605.5078 Lb*U/Hot_Door_CAD_Wall_Compound () XTUu*u1 D212.0107 558.1455 m335.6855 535.1904 L269.5518 527.9033 L355.8145 581.7544 L212.0107 558.1455 Lb314.165 566.0586 m232.4043 515.0186 L395.4795 532.9824 L262.7515 557.6177 L314.165 566.0586 Lb*U/Hot_Door_CAD_Wall_Compound () XTUu1 Ap0.8 0.05 0 0 k0 D253.8921 593.3311 m253.8921 611.2998 239.3252 625.8672 221.356 625.8672 c203.3872 625.8672 188.8203 611.2998 188.8203 593.3311 c188.8203 575.3623 203.3872 560.7949 221.356 560.7949 c239.3252 560.7949 253.8921 575.3623 253.8921 593.3311 cbUu417.0566 568.0791 m417.0566 585.7803 402.707 600.1299 385.0068 600.1299 c367.3066 600.1299 352.957 585.7803 352.957 568.0791 c352.957 550.3789 367.3066 536.0293 385.0068 536.0293 c402.707 536.0293 417.0566 550.3789 417.0566 568.0791 cBb1 (Black, White) 429.5 587 0 133 0.4856 0 0 0.4856 2208.6436 2142.5747 Bg64.5863 0 0 -66.0431 352.7139 601.1011 Xm4038.8279 0 0 -66.0431 -3686.1143 601.1011 Bc64.5863 0 0 -66.0431 352.7139 601.1011 Bm4038.8279 0 0 -66.0431 417.2998 601.1011 Bcb2 BBUu0.8 0.05 0 0 k3 w274.2876 478.2412 m274.2876 498.624 257.7637 515.1475 237.3809 515.1475 c216.9985 515.1475 200.4746 498.624 200.4746 478.2412 c200.4746 457.8589 216.9985 441.335 237.3809 441.335 c257.7637 441.335 274.2876 457.8589 274.2876 478.2412 cbUu5 w400.5469 489.4102 m400.5469 510.5977 383.3701 527.7734 362.1836 527.7734 c340.9961 527.7734 323.8203 510.5977 323.8203 489.4102 c323.8203 468.2231 340.9961 451.0469 362.1836 451.0469 c383.3701 451.0469 400.5469 468.2231 400.5469 489.4102 cBb1 (Rainbow) 423.5 248 0 163 0.4856 0 0 0.4856 2181.4492 2056.6221 Bg79.1546 0 0 -78.669 322.6055 528.7446 Xm4034.9421 0 0 -78.669 -3712.3369 528.7446 Bc15.8309 0 0 -78.669 322.6055 528.7446 Bm15.8309 0 0 -78.669 338.4365 528.7446 Bm15.8309 0 0 -78.669 354.2676 528.7446 Bm15.8309 0 0 -78.669 370.0986 528.7446 Bm15.8309 0 0 -78.669 385.9287 528.7446 Bm4034.9421 0 0 -78.669 401.7598 528.7446 Bcb2 BBUuu0.75 0.9 0 0 k1 w179.9922 681.7559 m179.0532 679.3643 178.4048 677.2871 177.8125 674.7852 c171.271 647.1025 188.4082 619.3564 216.0918 612.8135 c228.7061 609.832 240.4155 611.3125 251.8901 617.3398 cB/BBAccumRotation (-0.232089) XTU/ShapeBlendPathID (B) XT/ShapeBlendPathType (K) XT0 Ap257.1831 664.9224 m256.4434 663.1826 255.9126 661.5645 255.3779 659.7451 c249.4878 639.4478 258.3574 617.2661 277.8726 606.3652 c293.8452 597.4424 313.0781 600.6538 324.0127 612.6777 c328.9033 618.0952 331.6758 623.8799 332.3965 630.3828 CBu1 Ap323.2744 616.9189 m329.0371 600.1875 341.8145 588.623 359.0381 584.5527 c385.9023 578.2031 412.8271 594.834 419.1758 621.6982 c422.0371 633.8008 420.6631 645.0264 414.9697 656.0811 cB/BBAccumRotation (-0.232089) XTU/ShapeBlendPathID (A) XT/ShapeBlendPathType (K) XTU/BBAccumRotation (-0.232089) XTu*u0 Ap0.75 0.9 0 0 k1 D239.8994 366.7988 m261.2661 399.8203 L232.1294 383.7949 L228.7305 410.0186 L204.9355 385.7383 L171.9136 367.2842 L205.9063 364.8564 L197.6514 334.2627 L226.3018 349.3164 L270.4927 342.5186 L239.8994 366.7988 Lf0 D224.4766 357.3604 m207.4468 348.4121 L212.3535 366.5967 L192.1484 368.041 L211.7764 379.0078 L225.9199 393.4414 L227.9404 377.8535 L245.2588 387.3789 L232.5591 367.752 L250.7432 353.3193 L224.4766 357.3604 Lf*U0.25 0.3667 0.6667 0 k232.5591 367.752 m245.2588 387.3789 L227.9404 377.8535 L225.9199 393.4414 L211.7764 379.0078 L192.1484 368.041 L212.3535 366.5967 L207.4468 348.4121 L224.4766 357.3604 L250.7432 353.3193 L232.5591 367.752 LfUu0.75 0.9 0 0 k300.8047 393.0908 m335.2607 387.79 L306.0645 410.9619 L296.6396 396.3965 L300.8047 393.0908 Lf266.8701 396.0293 m262.4189 379.5352 L274.7383 386.0078 L277.2422 395.2881 L266.8701 396.0293 Lf290.2661 421.0591 m292.2061 406.0952 L305.5493 413.4336 L326.0342 445.0918 L296.8975 429.0669 L293.498 455.29 L269.7031 431.0093 L236.6816 412.5562 L270.6743 410.1279 L268.6772 402.7266 L276.688 407.2031 L290.2661 421.0591 Lf0.15 1 1 0 k291.0703 394.5879 m274.7383 386.0078 L272.5313 377.8301 L288.8809 386.4199 L314.0977 382.541 L300.8047 393.0908 L291.0703 394.5879 Lf257.8447 396.6738 m266.8701 396.0293 L268.6772 402.7266 L257.8447 396.6738 Lf306.0645 410.9619 m308.832 415.2393 L305.5493 413.4336 L304.667 412.0703 L306.0645 410.9619 Lf0.35 0.9667 0.6667 0 k300.8047 393.0908 m296.6396 396.3965 L306.0645 410.9619 L304.667 412.0703 L305.5493 413.4336 L292.2061 406.0952 L290.2661 421.0591 L276.688 407.2031 L268.6772 402.7266 L266.8701 396.0293 L277.2422 395.2881 L274.7383 386.0078 L291.0703 394.5879 L300.8047 393.0908 LfUu0.75 0.9 0 0 k0 R0 0 0 1 K365.1357 370.0166 m361.3438 355.9629 L373.4131 362.3047 L375.2979 369.291 L365.1357 370.0166 Lb385.2705 389.0234 m386.7559 377.5654 L399.4863 384.5674 L390.6533 370.915 L434.1855 364.2178 L403.5918 388.498 L424.959 421.52 L395.8223 405.4951 L392.4219 431.7178 L368.627 407.4375 L335.6055 388.9844 L369.5986 386.5566 L366.0752 373.498 L374.873 378.4141 L385.2705 389.0234 Lb360.4453 370.3516 m365.1357 370.0166 L366.0752 373.498 L360.4453 370.3516 Lb390.6533 370.915 m389.9941 371.0166 L373.4131 362.3047 L371.6914 355.9238 L384.21 362.501 L403.5176 359.5313 L390.1504 370.1387 L390.6533 370.915 Lb390.6533 370.915 m399.4863 384.5674 L386.7559 377.5654 L385.2705 389.0234 L374.873 378.4141 L366.0752 373.498 L365.1357 370.0166 L375.2979 369.291 L373.4131 362.3047 L389.9941 371.0166 L390.6533 370.915 LbUu79.4277 398.5439 m90.252 415.2725 L65.6753 401.7559 L66.9785 391.6973 L79.4277 398.5439 Lf65.0801 402.9189 m62.3447 424.0195 L41.9351 403.1934 L13.6113 387.3652 L42.0049 385.3369 L54.9268 392.5576 L65.0801 402.9189 Lf72.1221 386.792 m70.4224 384.165 L83.9805 373.4043 L64.3965 376.417 L51.6982 369.7451 L55.3574 383.3037 L42.4824 384.2236 L35.6875 359.041 L60.2622 371.9541 L98.166 366.1221 L72.1221 386.792 Lf73.3354 395.1929 m66.9785 391.6973 L65.6753 401.7559 L65.4727 403.3184 L65.0801 402.9189 L54.9268 392.5576 L42.0049 385.3369 L40.292 384.3799 L42.4824 384.2236 L55.3574 383.3037 L51.6982 369.7451 L64.3965 376.417 L83.9805 373.4043 L70.4224 384.165 L72.1221 386.792 L79.8916 398.7988 L79.4277 398.5439 L73.3354 395.1929 LFU0 0 0 1 k0 R0.75 0.9 0 0 K3 w151.3184 351.6084 m185.8926 346.2891 L161.7793 365.4258 L169.7539 377.749 L164.752 374.998 L177.9785 395.4395 L153.2402 381.833 L153.0928 382.9707 L152.8535 382.7266 L150.0713 404.1865 L129.6621 383.3604 L101.3379 367.5322 L130.4951 365.4492 L130.2627 364.5889 L123.999 361.0889 L129.2178 360.7158 L123.4141 339.209 L137.8887 346.8145 L137.1777 344.1787 L151.3184 351.6084 Lbu0.8 0.05 0 0 K2 w170.71 335.3271 m169.5908 343.959 L162.2271 336.4443 L162.9268 331.0469 L170.71 335.3271 Ls134.9722 315.1924 m120.8574 307.3047 L138.0791 306.0742 L140.4341 314.8018 L134.9722 315.1924 Ls192.7422 296.1172 m157.9282 301.4727 L147.5283 296.0088 L142.9336 278.9805 L167.5083 291.8926 L205.4121 286.0615 L192.7422 296.1172 Ls180.0161 308.1943 m197.498 335.2119 L173.001 321.7383 L169.5908 316.4678 L180.0161 308.1943 Ls0 O0.75 0.9 0 0 k192.7422 296.1172 m179.1709 306.8877 L180.0161 308.1943 L169.5908 316.4678 L173.001 321.7383 L172.5068 321.4668 L170.71 335.3271 L162.9268 331.0469 L162.2271 336.4443 L149.1812 323.1328 L134.9722 315.1924 L140.4341 314.8018 L138.0791 306.0742 L150.0146 305.2217 L147.5283 296.0088 L157.9282 301.4727 L192.7422 296.1172 LbUu0.75 0.9 0 0 K1 J 1 j 1 w104.5752 288.1406 m90.4844 290.3076 L90.3906 290.2578 LS71.6699 298.7412 m72.9902 303.6367 L66.3008 304.1152 LS71.6699 298.7412 m65.9102 277.3955 L90.3906 290.2578 LS104.5752 288.1406 m128.3887 284.4766 L102.1475 305.3027 L120.4746 333.627 L95.4834 319.8809 L92.5674 342.373 L72.1582 321.5469 L43.834 305.7188 L66.3008 304.1152 LS71.6699 298.7412 m74.3467 298.5498 L70.4697 284.1836 L83.9238 291.2529 L90.3906 290.2578 LS104.5752 288.1406 m104.6748 288.0605 L90.3906 290.2578 LS66.3008 304.1152 m73.8906 308.3555 L85.0635 319.7578 L86.6602 307.4434 L100.3418 314.9688 L90.3086 299.4629 L104.5752 288.1406 LS66.3008 304.1152 m58.3838 299.6904 L71.6699 298.7412 LSUu0 O(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p0.75 0.9 0 0 K0 J 0 j 2 w8 144 m599.0078 144 LBUu568 145 m209 177 L112 145 L216 96 L568 145 LbUu8 180 m600.0537 180 LBUuUuUuULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 -1 255 0 0 Lb(Dimension Layer) Ln0 Au0 R0 G800 Ar0 J 0 j 0 w 1 M []0 d%AI3_Note:0 D0 XR236.6758 622.0347 m155 469 LS0 O0 g1 j230.3018 615.6807 m234.9448 613.2026 L236.6758 622.0347 L230.3018 615.6807 Lb212.4106 570.9814 m207.7676 573.4595 L206.0366 564.6274 L212.4106 570.9814 Lb0 j155 469 m119 469 LS0 To1 0 0 1 115 465 0 Tp0 TvTP-46.9559 0 Td0 Tr0 O0 g1 w 4 M%_ 0 50 XQ/_Helvetica 12 11.172 -2.7001 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 1 TA%_ 0 XL0 TY0 TV36 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti2 Ta0 1 2 2 3 Th0 Tq0 Tg0 0 Tl0 Tc0 Tw(\257) Tx 1 0 Tk( 0.904") Tx 1 0 Tk(\r) TX TOU/Hot_Door_Dimension_Group (dimension) XTu0 R0 G0 w 1 M353.0078 566.272 m419 570 LS0 O0 g1 j361.749 564.1304 m361.4531 569.3848 L353.0078 566.272 L361.749 564.1304 Lb408.2646 572.0288 m408.5605 566.7744 L417.0059 569.8872 L408.2646 572.0288 Lb0 j419 570 m455 570 LS0 To1 0 0 1 459 566 0 Tp0 TvTP0 Tr0 O0 g1 w 4 M0 Ta(\257) Tx 1 0 Tk( 0.890") Tx 1 0 Tk(\r) TX TOU/Hot_Door_Dimension_Group (dimension) XTu0 R0 G0 w 1 M326.7676 504.1553 m404 472 LS0 O0 g1 j333.7012 498.418 m335.7246 503.2769 L326.7676 504.1553 L333.7012 498.418 Lb390.666 480.4023 m388.6426 475.5435 L397.5996 474.665 L390.666 480.4023 Lb0 j404 472 m440 472 LS0 To1 0 0 1 444 468 0 Tp0 TvTP0 Tr0 O0 g1 w 4 M(\257) Tx 1 0 Tk( 1.066") Tx 1 0 Tk(\r) TX TOU/Hot_Door_Dimension_Group (dimension) XTu0 R0 G0 w 1 M202.7124 490.8965 m272.0498 465.5859 LS0 O0 g1 j209.895 485.4736 m211.6992 490.417 L202.7124 490.8965 L209.895 485.4736 Lb264.8672 471.0088 m263.0625 466.0654 L272.0498 465.5859 L264.8672 471.0088 Lb0 j249 474 m285 474 LS0 To1 0 0 1 289 470 0 Tp0 TvTP0 Tr0 O0 g1 w 4 M(\257) Tx 1 0 Tk( 1.025") Tx 1 0 Tk(\r) TX TOU/Hot_Door_Dimension_Group (dimension) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF